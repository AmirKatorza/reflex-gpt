---
- hosts: ec2
  become: true
  vars:
    project_dir: /app/
    remote_env_file: "{{ project_dir }}/.env"
    compose_file: "{{ project_dir }}/compose.prod.yaml"
    env_file: "{{ playbook_dir | dirname }}/.env"
  vars_files:
    - "{{playbook_dir}}/vars.yaml"
  tasks:
    - name: Update package manager
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Install Docker Compose
      block:
        - name: Gather system architecture facts
          setup:
            filter: ansible_architecture

        - name: Download Docker Compose binary
          ansible.builtin.get_url:
            url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
            dest: /usr/local/bin/docker-compose
            mode: '0755'
        
        - name: Verify Docker Compose installation
          ansible.builtin.command: docker-compose --version
          register: compose_version
          changed_when: false
          failed_when: "'docker-compose version' not in compose_version.stdout"
      
      rescue:
        - name: Debug Docker Compose installation issue
          ansible.builtin.debug:
            msg: 
              - "Failed to install Docker Compose"
              - "System: {{ ansible_system }}"
              - "Architecture: {{ ansible_architecture }}"
              - "Full error: {{ ansible_failed_result }}"
          failed_when: true

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Create project directory
      file:
        path: "{{ project_dir }}"
        state: directory
        mode: '0755'
        owner: ec2-user
        group: ec2-user

    - name: Copy .env file to server
      copy:
        src: "{{ env_file }}"
        dest: "{{ remote_env_file }}"
        owner: ec2-user
        group: ec2-user
      no_log: false

    - name: Copy Docker Compose file to server
      copy:
        src: "{{ playbook_dir | dirname }}/compose.prod.yaml"
        dest: "{{ compose_file }}"
        owner: ec2-user
        group: ec2-user

    - name: Login to Docker Hub
      shell: echo {{ dockerhub_token }} | docker login -u {{ dockerhub_username }} --password-stdin
      no_log: true

    - name: Pull latest Docker images
      shell:
        cmd: docker compose -f compose.prod.yaml pull
      args:
        chdir: "{{ project_dir }}"

    - name: Update Docker services
      shell:
        cmd: |
          services=$(docker compose -f compose.prod.yaml config --services)
          for service in $services; do
            if docker compose -f compose.prod.yaml ps --status running $service | grep -q $service; then
              echo "Updating running service: $service"
              docker compose -f compose.prod.yaml up -d --no-deps "$service"
            else
              echo "Starting service: $service"
              docker compose -f compose.prod.yaml up -d --no-deps "$service"
            fi
          done
      args:
        chdir: "{{ project_dir }}"

    - name: Remove orphaned containers
      shell:
        cmd: docker compose -f compose.prod.yaml up -d --remove-orphans
      args:
        chdir: "{{ project_dir }}"

    - name: Prune Docker system
      shell:
        cmd: docker system prune -f
      args:
        chdir: "{{ project_dir }}"